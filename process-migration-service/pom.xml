<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.drools</groupId>
    <artifactId>droolsjbpm-integration</artifactId>
    <version>7.53.0-SNAPSHOT</version>
  </parent>

  <artifactId>process-migration-service</artifactId>
  <name>Process Instance Migration Service</name>
  <packaging>war</packaging>

  <properties>
    <version.fabric8-maven>3.5.42</version.fabric8-maven>
    <version.weld-junit>1.3.1.Final</version.weld-junit>
    <version.org.jboss.weld.weld>2.4.3.Final</version.org.jboss.weld.weld>
    <version.org.jboss.weld.weld-api>2.4.SP2</version.org.jboss.weld.weld-api>
    <!-- Frontend properties -->
    <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
    <maven-war-plugin.version>3.2.2</maven-war-plugin.version>
    <!-- Following properties are used only for testing -->
    <!-- This property needs to be overridden when running tests against different version of the WAR (e.g. running
         SNAPSHOT tests against Beta3 WAR) so the tests actually know what exact version of server is being tested -->
    <kie.server.version>${project.version}</kie.server.version>
    <container.hostname>localhost</container.hostname>
    <!-- <container.port/> can't define the default port value, because the build-helper-maven-plugin:reserve-network-port
         is not able to override the value of the property. The port number would then always be the same
         (the default one, unless changed from outside) -->
    <kie.server.context>kie-server</kie.server.context>
    <cargo.container.id>valid-id-needs-to-be-specified-in-appropriate-container-profile</cargo.container.id>
    <kie.server.classifier>ee8</kie.server.classifier>
    <kie.server.base.http.url>http://${container.hostname}:${container.port}/${kie.server.context}/services/rest/server</kie.server.base.http.url>
    <!-- Kie server datasource configuration. -->
    <!-- <org.kie.server.persistence.ds/> Defined in container profiles. -->
    <org.kie.server.persistence.dialect>org.hibernate.dialect.H2Dialect</org.kie.server.persistence.dialect>
    <org.kie.server.datasource.connection.url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    </org.kie.server.datasource.connection.url>
    <org.kie.server.datasource.username>sa</org.kie.server.datasource.username>
    <org.kie.server.datasource.password>sa</org.kie.server.datasource.password>
    <org.kie.server.datasource.driver.class>org.h2.jdbcx.JdbcDataSource</org.kie.server.datasource.driver.class>
    <kie.server.username>yoda</kie.server.username>
    <kie.server.password>usetheforce123@</kie.server.password>

    <!-- PIM service configuration -->
    <pim.server.http.port>18080</pim.server.http.port>
    <pim.server.http>http://${container.hostname}:${pim.server.http.port}/</pim.server.http>
    <pim.server.http.rest>${pim.server.http}/rest</pim.server.http.rest>
    <pim.server.http.health>${pim.server.http}/health</pim.server.http.health>
    <pim.username>kermit</pim.username>
    <pim.password>thefrog</pim.password>

    <!-- JDBC Properties -->
    <maven.hibernate.dialect>org.hibernate.dialect.H2Dialect</maven.hibernate.dialect>
    <maven.datasource.classname>org.h2.jdbcx.JdbcDataSource</maven.datasource.classname>
    <maven.jdbc.driver.class>org.h2.Driver</maven.jdbc.driver.class>
    <maven.jdbc.username>sa</maven.jdbc.username>
    <maven.jdbc.password>foo</maven.jdbc.password>
    <maven.jdbc.url>jdbc:h2:mem:test</maven.jdbc.url>
    <maven.jdbc.db.name/>
    <maven.jdbc.db.server/>
    <maven.jdbc.db.port/>
    <maven.jdbc.schema>public</maven.jdbc.schema>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.jboss.weld</groupId>
        <artifactId>weld-junit4</artifactId>
        <version>${version.weld-junit}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <!-- KIE Dependencies -->
    <dependency>
      <groupId>org.kie.server</groupId>
      <artifactId>kie-server-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie.server</groupId>
      <artifactId>kie-server-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie.server</groupId>
      <artifactId>kie-server-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie.server</groupId>
      <artifactId>kie-server-controller-client</artifactId>
    </dependency>

    <!-- Thorntail Fractions -->
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>jaxrs</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>thorntail-jdk-specific</artifactId>
          <groupId>io.thorntail.jdk-specific</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>logging</artifactId>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>spi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>microprofile-config</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>narayana-jts-idlj</artifactId>
          <groupId>org.jboss.narayana.jts</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>microprofile-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>jpa</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javax.enterprise</groupId>
          <artifactId>cdi-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.jboss.spec.javax.el</groupId>
          <artifactId>jboss-el-api_3.0_spec</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>ejb</artifactId>
    </dependency>

    <!-- External dependencies -->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-test-util</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.jboss.spec.javax.transaction</groupId>
          <artifactId>jboss-transaction-api_1.2_spec</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.jboss.weld</groupId>
      <artifactId>weld-junit4</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>hibernate-jpa-2.1-api</artifactId>
          <groupId>org.hibernate.javax.persistence</groupId>
        </exclusion>
        <exclusion>
          <groupId>javax.enterprise</groupId>
          <artifactId>cdi-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.jboss.spec.javax.el</groupId>
          <artifactId>jboss-el-api_3.0_spec</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-entitymanager</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>javax.activation</groupId>
          <artifactId>javax.activation-api</artifactId>
        </exclusion>
        <!-- collides with com.sun.xml.bind:jaxb-impl:jar:2.3.0 and com.sun.xml.bind:jaxb-impl:jar:2.3.0 -->
        <exclusion>
          <groupId>org.glassfish.jaxb</groupId>
          <artifactId>jaxb-runtime</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.persistence</groupId>
          <artifactId>javax.persistence-api</artifactId>
        </exclusion>   
        <exclusion>
          <groupId>org.jboss.spec.javax.transaction</groupId>
          <artifactId>jboss-transaction-api_1.2_spec</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>commons-logging</artifactId>
          <groupId>commons-logging</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.kie.soup</groupId>
      <artifactId>kie-soup-maven-integration</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.enterprise</groupId>
          <artifactId>cdi-api</artifactId>
        </exclusion> 
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.kie.server</groupId>
      <artifactId>kie-server</artifactId>
      <classifier>${kie.server.classifier}</classifier>
      <type>war</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>process-migration</finalName>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
      </testResource>
      <testResource>
        <directory>src/test/filtered-resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${maven-resources-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.bazaarvoice.maven.plugins</groupId>
          <artifactId>process-exec-maven-plugin</artifactId>
          <version>0.8</version>
        </plugin>
        <plugin>
          <artifactId>maven-war-plugin</artifactId>
          <version>${maven-war-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>io.thorntail</groupId>
        <artifactId>thorntail-maven-plugin</artifactId>
        <version>${version.thorntail}</version>
        <configuration>
          <filterWebInfLib>uberjar-only</filterWebInfLib>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <configuration>
          <workingDirectory>frontend</workingDirectory>
        </configuration>
        <executions>
          <execution>
            <id>install node and npm</id>
            <phase>initialize</phase>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
          </execution>
          <execution>
            <id>npm install lock-treatment-tool and run-node</id>
            <phase>initialize</phase>
            <goals>
                <goal>npm</goal>
            </goals>
            <configuration>
                <arguments>install lock-treatment-tool --global-style --no-package-lock</arguments>
            </configuration>
          </execution>
          <execution>
            <id>lock-treatment-tool execution</id>
            <phase>initialize</phase>
            <goals>
                <goal>npm</goal>
            </goals>
            <configuration>
                <arguments>run locktt --</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm install</id>
            <phase>compile</phase>
            <goals>
              <goal>npm</goal>
            </goals>
          </execution>
          <execution>
            <id>npm run build</id>
            <phase>compile</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
          <execution>
            <id>run tests</id>
            <phase>test</phase>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>test</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>process-classes</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
              <resources>
                <resource>
                  <directory>frontend/dist</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-css</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/${project.build.finalName}/css</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>frontend/src/css/</directory>
                  <includes>
                    <include>**/*</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <attachClasses>true</attachClasses>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>reserve-network-port</id>
            <goals>
              <goal>reserve-network-port</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <portNames>
                <portName>container.port</portName>
                <portName>cargo.jboss.ajp.port</portName>
                <portName>cargo.jboss.https.port</portName>
                <portName>cargo.jboss.management-http.port</portName>
                <portName>cargo.jboss.management-https.port</portName>
              </portNames>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven3-plugin</artifactId>
        <configuration>
          <container>
            <containerId>${cargo.container.id}</containerId>
            <type>installed</type>
            <systemProperties>
              <kie.server.base.http.url>${kie.server.base.http.url}</kie.server.base.http.url>
              <!-- Persistence configuration -->
              <org.kie.server.persistence.ds>${org.kie.server.persistence.ds}</org.kie.server.persistence.ds>
              <org.kie.server.persistence.dialect>${org.kie.server.persistence.dialect}</org.kie.server.persistence.dialect>
              <!-- disable JMS support for executor to use same tests for all containers for jbpm executor -->
              <org.kie.executor.jms>false</org.kie.executor.jms>
              <org.kie.server.sync.deploy>true</org.kie.server.sync.deploy>
            </systemProperties>
            <dependencies>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
              </dependency>
            </dependencies>
          </container>
          <deployer/>
          <deployables>
            <deployable>
              <groupId>org.kie.server</groupId>
              <artifactId>kie-server</artifactId>
              <!-- default, may be overridden in container specific profiles -->
              <classifier>${kie.server.classifier}</classifier>
              <type>war</type>
              <properties>
                <context>${kie.server.context}</context>
              </properties>
              <pingURL>${kie.server.base.http.url}</pingURL>
              <pingTimeout>60000</pingTimeout>
            </deployable>
          </deployables>
          <configuration>
            <properties>
              <cargo.servlet.port>${container.port}</cargo.servlet.port>
            </properties>
            <users>
              <user>
                <name>Administrator</name>
                <password>${kie.server.password}</password>
                <roles>
                  <role>kie-server</role>
                  <role>guest</role>
                  <role>Administrators</role>
                </roles>
              </user>
              <user>
                <name>${kie.server.username}</name>
                <password>${kie.server.password}</password>
                <roles>
                  <role>kie-server</role>
                </roles>
              </user>
            </users>
          </configuration>
        </configuration>
        <executions>
          <execution>
            <id>start-container</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-container</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.bazaarvoice.maven.plugins</groupId>
        <artifactId>process-exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>start-process-migration-service</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <name>ProcessMigrationService</name>
              <healthcheckUrl>${pim.server.http.health}</healthcheckUrl>
              <waitForInterrupt>false</waitForInterrupt>
              <waitAfterLaunch>300</waitAfterLaunch>
              <processLogFile>${project.build.directory}/pim.log</processLogFile>
              <arguments>
                <argument>java</argument>
                <argument>-jar</argument>
                <argument>${project.build.directory}/${project.build.finalName}-thorntail.jar</argument>
                <argument>-s${project.build.testOutputDirectory}/project-test.yml</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>stop-process-migration-service</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop-all</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <thorntail.project.stage>test</thorntail.project.stage>
            <kie.server.endpoint>${kie.server.base.http.url}</kie.server.endpoint>
            <kie.server.username>${kie.server.username}</kie.server.username>
            <kie.server.password>${kie.server.password}</kie.server.password>
            <!-- Properties values are taken from application-users.properties and project-test.yml files -->
            <pim.username>${pim.username}</pim.username>
            <pim.password>${pim.password}</pim.password>
            <pim.endpoint>${pim.server.http}</pim.endpoint>
            <pim.rest.endpoint>${pim.server.http.rest}</pim.rest.endpoint>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>wildfly</id>
      <activation>
        <property>
          <name>container.profile</name>
          <value>wildfly</value>
        </property>
      </activation>
      <properties>
        <cargo.container.id>wildfly23x</cargo.container.id>
        <org.kie.server.persistence.ds>java:/jdbc/jbpm</org.kie.server.persistence.ds>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <configuration>
              <container>
                <artifactInstaller>
                  <groupId>org.wildfly</groupId>
                  <artifactId>wildfly-dist</artifactId>
                  <version>${version.org.wildfly}</version>
                </artifactInstaller>
              </container>
              <configuration>
                <properties>
                  <cargo.jboss.management-http.port>19991</cargo.jboss.management-http.port>
                  <cargo.jboss.configuration>standalone-full</cargo.jboss.configuration>
                  <cargo.jvmargs>-Xmx1024m</cargo.jvmargs>
                  <cargo.jboss.ajp.port>${cargo.jboss.ajp.port}</cargo.jboss.ajp.port>
                  <cargo.jboss.https.port>${cargo.jboss.https.port}</cargo.jboss.https.port>
                  <cargo.jboss.management-http.port>${cargo.jboss.management-http.port}</cargo.jboss.management-http.port>
                  <cargo.jboss.management-https.port>${cargo.jboss.management-https.port}</cargo.jboss.management-https.port>
                </properties>
                <datasources>
                  <datasource>
                    <jndiName>${org.kie.server.persistence.ds}</jndiName>
                    <driverClass>${org.kie.server.datasource.driver.class}</driverClass>
                    <url>${org.kie.server.datasource.connection.url}</url>
                    <username>${org.kie.server.datasource.username}</username>
                    <password>${org.kie.server.datasource.password}</password>
                    <transactionSupport>XA_TRANSACTION</transactionSupport>
                  </datasource>
                </datasources>
              </configuration>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- This profile basically disables any cargo related execution. It can be used when the tests should run on
     a container that has already been started and it is not managed by cargo. It can also be used when doing
     a "no-test" build, as the container should not be used in that case. -->
    <profile>
      <id>custom-container</id>
      <activation>
        <!-- The tests are not executed unless specific container profile is used. Disable cargo by default. -->
        <activeByDefault>true</activeByDefault>
        <property>
          <name>custom-container</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven3-plugin</artifactId>
            <executions>
              <execution>
                <id>start-container</id>
                <phase>none</phase>
                <goals/>
                <!-- do nothing, container is not managed by cargo -->
              </execution>
              <execution>
                <id>stop-container</id>
                <phase>none</phase>
                <goals/>
                <!-- do nothing, container is not managed by cargo -->
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.bazaarvoice.maven.plugins</groupId>
            <artifactId>process-exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start-process-migration-service</id>
                <phase>none</phase>
                <goals/>
              </execution>
              <execution>
                <id>stop-process-migration-service</id>
                <phase>none</phase>
                <goals/>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <!-- Integration tests are skipped by default. They are activated when specific container profile is used. -->
      <id>skipITs-by-default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <artifactId>maven-failsafe-plugin</artifactId>
              <configuration>
                <skipITs>true</skipITs>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>
    <profile>
      <id>run-code-coverage</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.bazaarvoice.maven.plugins</groupId>
            <artifactId>process-exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>start-process-migration-service</id>
                <configuration>
                  <arguments>
                    <argument>java</argument>
                    <argument>${jacoco.agent.line}</argument>
                    <argument>-jar</argument>
                    <argument>${project.build.directory}/${project.build.finalName}-thorntail.jar</argument>
                    <argument>-s${project.build.testOutputDirectory}/project-test.yml</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
